<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>{{title}}</title>
  {{>styling}}
</head>

<body>
  <h1>{{title}}</h1>
  <p>Back to <a href="{{rel '/debug'}}">Debug</a></p>
  <p>Back to <a href="{{rel '/job-templates'}}">Job templates</a></p>
  <p>Job created:
  <pre>{{{toDateTimeString createdAt}}}</pre>
  </p>
  <p>Job modified:
  <pre>{{{toDateTimeString modifiedAt}}}</pre>
  </p>
  <p>Job status (updatet):
  <pre id="status">{{{toJobStatus status}}}</pre>
  </p>
  <p>Job function:
  <pre>{{{toDatamonitoringFunction function}}}</pre>
  </p>
  <label for="progress">Procedure progress:</label>
  <progress id="progress" value="{{done}}" max="{{total}}"></progress>
  <div style="width: 800px;">
    <canvas id="graph"></canvas>
  </div>
  <hr>
  <div id="log">
    {{#each log}}
    <p>
    <pre>{{this}}</pre>
    </p>
    {{/each}}
  </div>
</body>
<script src="https://cdn.jsdelivr.net/npm/chart.js@4.4.2/dist/chart.umd.min.js"></script>
<script>
  const performanceChart = new Chart(
    document.getElementById('graph'),
    {
      type: 'bar',
      data: {
        labels: [],
        datasets: [
          {
            label: 'Performance',
            data: [],
          }
        ],
      },
      options: {

      },
    }
  );
  const progressElement = document.getElementById('progress');
  const logElement = document.getElementById('log');

  let counter = 0;
  const eventSource = new EventSource("{{rel '/event-stream'}}/{{uuid}}");
  eventSource.onmessage = function (event) {
    console.log('event received', event);
    const eventObject = JSON.parse(event.data);
    if ('update' in eventObject) {
      const { timestamp, message } = eventObject.update;
      const par = document.createElement('p');
      const pre = document.createElement('pre');
      pre.textContent = timestamp + ": " + message;
      par.appendChild(pre);
      logElement.appendChild(par);
      return;

    } else if ('progress' in eventObject) {
      const { done, total, lastDurationMilliseconds, subProcessIdentifier } = eventObject.progress;
      const progressElement = document.getElementById('progress');
      progressElement.setAttribute('value', done);
      progressElement.setAttribute('max', total);

      performanceChart.data.labels.push(counter++);
      performanceChart.data.datasets[0].data.push(lastDurationMilliseconds);
      // Prevent overflowing
      if (performanceChart.data.labels.length > 200) {
        performanceChart.data.labels.shift();
        performanceChart.data.datasets[0].data.shift();
      }
      performanceChart.update('none');
      return;

    } else if ('status' in eventObject) {
      const par = document.createElement('p');
      par.style.color = "red";
      par.style.fontWeight = "bold";
      const pre = document.createElement('pre');
      pre.textContent = "STATUS CHANGE:" + JSON.stringify({ done: eventObject.status.done, failed: eventObject.status.failed });
      par.appendChild(pre);
      logElement.appendChild(par);
      const statusElement = document.getElementById("status").innerText = eventObject.status.newStatusKey;
      return;

    } else {
      console.warn(`Received weird server side event:${JSON.stringify(event)}`);
    }
  }
</script>

</html>